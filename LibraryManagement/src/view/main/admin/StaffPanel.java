/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.main.admin;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.database.Connect;
import model.database.Staff;
import swing.UIController;
import utilities.File;
import view.main.librarian.ReaderPanel;
import static view.main.librarian.ReaderPanel.hash;

/**
 *
 * @author Admin
 */
public class StaffPanel extends javax.swing.JPanel {

    DefaultTableModel dtm;

    public enum Mode {
        ADD,
        MODIFY,
        FREE
    }
    Mode mode;

    /**
     * Creates new form StaffPanel
     */
    public StaffPanel() {
        initComponents();
        getStaff();
        loadBranch();
        loadRole();
        UIController.setDefaultTableHeader(jTable_Staff);
        setEditableForAll(false);
    }

    void loadBranch() {
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select branch_name from branch");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jComboBox_Branch.addItem(rs.getString(1));
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy chi nhánh");
        }
    }

    void loadRole() {
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select account_name from account_role where id != 1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                jComboBox_Role.addItem(rs.getString(1));
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy role!!");
        }
    }

    // get nhân viên (trừ độc giả) có status == 1(chưa xóa).
    void getStaff() {
        dtm = (DefaultTableModel) jTable_Staff.getModel();
        dtm.setNumRows(0);
        Connection ketNoi = Connect.GetConnect();
        Vector vt;
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select a.id, b.id, a.account_name, r.account_name, a.gender, a.date_of_birth, a.account_address, a.phone, a.email, a.registered_date from account a inner join branch b on a.branch_id = b.id inner join account_role r on a.account_role_id = r.id where r.id != 1 and a.account_status = 1");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                vt = new Vector();
                vt.add(rs.getString(1));
                vt.add(rs.getString(2));
                vt.add(rs.getString(3));
                vt.add(rs.getString(4));
				vt.add(rs.getString(5));
                vt.add(rs.getDate(6));
                vt.add(rs.getString(7));
                vt.add(rs.getString(8));
                vt.add(rs.getString(9));
                vt.add(rs.getDate(10));
                dtm.addRow(vt);
            }
            jTable_Staff.setModel(dtm);
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("loi lay user");
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTextField_ID = new javax.swing.JTextField();
        jRadioButton_Male = new javax.swing.JRadioButton();
        jRadioButton_Female = new javax.swing.JRadioButton();
        jRadioButton_Other = new javax.swing.JRadioButton();
        jTextField_PhoneNumber = new javax.swing.JTextField();
        jTextField_Name = new javax.swing.JTextField();
        jTextField_Email = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jComboBox_Branch = new javax.swing.JComboBox<>();
        jDateChooser_DateOfBirth = new com.toedter.calendar.JDateChooser();
        jComboBox_Role = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jTextField_Address = new javax.swing.JTextField();
        jPanel_Card = new javax.swing.JPanel();
        jPanel_Card1 = new javax.swing.JPanel();
        jButton_Add = new javax.swing.JButton();
        jButton_Modify = new javax.swing.JButton();
        jButton_Remove = new javax.swing.JButton();
        jPanel_Card2 = new javax.swing.JPanel();
        jButton_OK = new javax.swing.JButton();
        jButton_Cancel = new javax.swing.JButton();
        jButton_Clear = new javax.swing.JButton();
        jButton_ClearSearch = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jTextField_NameSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_Staff = new javax.swing.JTable();
        jButton_ExportExcel = new javax.swing.JButton();
        jButton_ImportExcel = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Staff information", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 2, 14), new java.awt.Color(153, 153, 153))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel1.setText("Username");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel2.setText("Name");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel3.setText("Gender");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel7.setText("Phone number");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel8.setText("Email");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel12.setText("Branch");

        jTextField_ID.setEditable(false);
        jTextField_ID.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jRadioButton_Male.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton_Male);
        jRadioButton_Male.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jRadioButton_Male.setSelected(true);
        jRadioButton_Male.setText("Male");

        jRadioButton_Female.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton_Female);
        jRadioButton_Female.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jRadioButton_Female.setText("Female");

        jRadioButton_Other.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(jRadioButton_Other);
        jRadioButton_Other.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jRadioButton_Other.setText("Other");

        jTextField_PhoneNumber.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jTextField_Name.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jTextField_Email.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel4.setText("Date of birth");

        jLabel15.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel15.setText("Role");

        jComboBox_Branch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jComboBox_Branch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_BranchActionPerformed(evt);
            }
        });

        jDateChooser_DateOfBirth.setDateFormatString("yyyy-MM-dd");
        jDateChooser_DateOfBirth.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N

        jComboBox_Role.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jComboBox_Role.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_RoleActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel16.setText("Address");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel4)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jRadioButton_Male)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButton_Female)
                                        .addGap(18, 18, 18)
                                        .addComponent(jRadioButton_Other)
                                        .addGap(57, 57, 57))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jDateChooser_DateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jTextField_ID, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_Email, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jTextField_PhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                            .addComponent(jTextField_Name, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel16)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_Address)))
                .addGap(107, 107, 107)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel12))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox_Branch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox_Role, 0, 160, Short.MAX_VALUE))
                .addGap(177, 177, 177))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(jLabel2)
                        .addComponent(jTextField_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField_ID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jRadioButton_Male)
                            .addComponent(jRadioButton_Female)
                            .addComponent(jRadioButton_Other)
                            .addComponent(jLabel7)
                            .addComponent(jTextField_PhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(jTextField_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(jDateChooser_DateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(jComboBox_Branch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel15)
                        .addComponent(jComboBox_Role, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel16)
                        .addComponent(jTextField_Address, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel_Card.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Card.setLayout(new java.awt.CardLayout());

        jPanel_Card1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Card1.setMaximumSize(new java.awt.Dimension(30000, 33));
        jPanel_Card1.setPreferredSize(new java.awt.Dimension(439, 30));
        jPanel_Card1.setLayout(new java.awt.GridLayout(1, 0, 35, 0));

        jButton_Add.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Add.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add30px.png"))); // NOI18N
        jButton_Add.setText("Add");
        jButton_Add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Add.setMaximumSize(new java.awt.Dimension(95, 30));
        jButton_Add.setMinimumSize(new java.awt.Dimension(95, 30));
        jButton_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_AddActionPerformed(evt);
            }
        });
        jPanel_Card1.add(jButton_Add);

        jButton_Modify.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Modify.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Modify.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/edit.png"))); // NOI18N
        jButton_Modify.setText("Modify");
        jButton_Modify.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Modify.setEnabled(false);
        jButton_Modify.setMaximumSize(new java.awt.Dimension(95, 33));
        jButton_Modify.setMinimumSize(new java.awt.Dimension(95, 30));
        jButton_Modify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ModifyActionPerformed(evt);
            }
        });
        jPanel_Card1.add(jButton_Modify);

        jButton_Remove.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Remove.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/trash.png"))); // NOI18N
        jButton_Remove.setText("Remove");
        jButton_Remove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Remove.setEnabled(false);
        jButton_Remove.setMaximumSize(new java.awt.Dimension(123, 35));
        jButton_Remove.setMinimumSize(new java.awt.Dimension(95, 30));
        jButton_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_RemoveActionPerformed(evt);
            }
        });
        jPanel_Card1.add(jButton_Remove);

        jPanel_Card.add(jPanel_Card1, "cardFirst");

        jPanel_Card2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_Card2.setLayout(new java.awt.GridLayout(1, 0, 35, 0));

        jButton_OK.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_OK.setForeground(new java.awt.Color(51, 51, 51));
        jButton_OK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/add30px.png"))); // NOI18N
        jButton_OK.setText("OK");
        jButton_OK.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_OKActionPerformed(evt);
            }
        });
        jPanel_Card2.add(jButton_OK);

        jButton_Cancel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Cancel.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/cancel20px.png"))); // NOI18N
        jButton_Cancel.setText("Cancel");
        jButton_Cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_CancelActionPerformed(evt);
            }
        });
        jPanel_Card2.add(jButton_Cancel);

        jButton_Clear.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_Clear.setForeground(new java.awt.Color(51, 51, 51));
        jButton_Clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clear.png"))); // NOI18N
        jButton_Clear.setText("Clear");
        jButton_Clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_Clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ClearActionPerformed(evt);
            }
        });
        jPanel_Card2.add(jButton_Clear);

        jPanel_Card.add(jPanel_Card2, "cardSecond");

        jButton_ClearSearch.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_ClearSearch.setForeground(new java.awt.Color(51, 51, 51));
        jButton_ClearSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clear.png"))); // NOI18N
        jButton_ClearSearch.setText("Clear");
        jButton_ClearSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton_ClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ClearSearchActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jLabel14.setText("Name");

        jTextField_NameSearch.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        jTextField_NameSearch.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField_NameSearchCaretUpdate(evt);
            }
        });

        jTable_Staff.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Branch Id", "Name", "Role", "Gender", "Date of birth", "Adress", "Phone", "Email", "Registered"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable_Staff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_StaffMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_Staff);

        jButton_ExportExcel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_ExportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/excel.png"))); // NOI18N
        jButton_ExportExcel.setText("Export");
        jButton_ExportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ExportExcelActionPerformed(evt);
            }
        });

        jButton_ImportExcel.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton_ImportExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/excel.png"))); // NOI18N
        jButton_ImportExcel.setText("Import");
        jButton_ImportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_ImportExcelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField_NameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_ClearSearch)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_ImportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton_ExportExcel)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel_Card, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(jTextField_NameSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel_Card, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jButton_ExportExcel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_ImportExcel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton_ClearSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void clearAll() {
        jRadioButton_Male.setSelected(true);
        jDateChooser_DateOfBirth.setDate(null);
        jTextField_Name.setText("");
        jTextField_PhoneNumber.setText("");
        jTextField_Email.setText("");
        jTextField_ID.setText("");
        jComboBox_Branch.setSelectedIndex(0);
        jComboBox_Role.setSelectedIndex(0);
		jTextField_Address.setText("");
    }

    public void setEditableForAll(boolean editable) {
		jRadioButton_Other.setEnabled(editable);
		jRadioButton_Female.setEnabled(editable);
		jRadioButton_Male.setEnabled(editable);
//		jTextField_ID.setEnabled(editable);
		jTextField_Address.setEnabled(editable);
        jDateChooser_DateOfBirth.setEnabled(editable);
        jTextField_Name.setEditable(editable);
        jTextField_PhoneNumber.setEditable(editable);
        jTextField_Email.setEditable(editable);
        jComboBox_Branch.setEnabled(editable);
        jComboBox_Role.setEnabled(editable);
    }

    private boolean checkinput() {
        String id = jTextField_ID.getText();
        String sqlId = "select * from account where id = '" + id + "'";
        String sqlEmail = "select * from account where email = '" + jTextField_Email.getText() + "'";
        String sqlPhone = "select * from account where phone_number = '" + jTextField_PhoneNumber.getText() + "'";
        if ("".equals(id)) {
            JOptionPane.showMessageDialog(this, "Mã nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        } else if (checkExist(sqlId) != 0) {
            JOptionPane.showMessageDialog(this, "Mã nhân viên đã tồn tại!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        } else if ("".equals(jTextField_Name.getText())) {
            JOptionPane.showMessageDialog(this, "Tên nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Name.requestFocusInWindow();
            return false;
        } else if ("".equals(jTextField_PhoneNumber.getText())) {
            JOptionPane.showMessageDialog(this, "SĐT nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_PhoneNumber.requestFocusInWindow();
            return false;
        } else if (!jTextField_PhoneNumber.getText().matches("0[0-9]{9}")) {
            JOptionPane.showMessageDialog(this, "SĐT nhân viên nhập chưa đúng định dạng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_PhoneNumber.requestFocusInWindow();
            return false;
        } else if (checkExist(sqlPhone) != 0) {
            JOptionPane.showMessageDialog(this, "SĐT nhân viên đã được sử dụng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        } else if ("".equals(jTextField_Email.getText())) {
            JOptionPane.showMessageDialog(this, "Email nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Email.requestFocusInWindow();
            return false;
        } else if (!jTextField_Email.getText().matches("^[a-zA-Z][\\w]+@([\\w]+\\.[\\w]+|[\\w]+\\.[\\w]{2,}\\.[\\w]{2,})$")) {
            JOptionPane.showMessageDialog(this, "Email nhân viên nhập chưa đúng định dạng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Email.requestFocusInWindow();
            return false;
        } else if (checkExist(sqlEmail) != 0) {
            JOptionPane.showMessageDialog(this, "Email nhân viên đã được sử dụng!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_ID.requestFocusInWindow();
            return false;
        } else if ("".equals(jTextField_Address.getText())) {
            JOptionPane.showMessageDialog(this, "Adress nhân viên không được trống!!", "Warning", JOptionPane.WARNING_MESSAGE);
            jTextField_Address.requestFocusInWindow();
            return false;
        } else {
            return true;
        }
    }

    public int checkExist(String sql) {
        Connection ketNoi = Connect.GetConnect();
        int tonTai = 0;
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                tonTai = 1;
            }
        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        return tonTai;
    }

    private void jButton_OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_OKActionPerformed

        if (mode == Mode.ADD) {
            if (checkinput() == true) {
                String username = jTextField_ID.getText();
                String Full_Name = jTextField_Name.getText();
                String genderEndlish = getSelectedButtonText(buttonGroup1);
                String gender = "";
                if (genderEndlish.equalsIgnoreCase("Male")) {
                    gender = "Nam";
                } else if (genderEndlish.equalsIgnoreCase("Female")) {
                    gender = "Nữ";
                } else {
                    gender = "Khác";
                }
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                String date_of_birth = sdf.format(jDateChooser_DateOfBirth.getDate());
                String address = jTextField_Address.getText();
                String email = jTextField_Email.getText();
                String phone_number = jTextField_PhoneNumber.getText();
                String registeredDate = java.time.LocalDate.now().toString();
                String branch = jComboBox_Branch.getSelectedItem().toString();
                String role = jComboBox_Role.getSelectedItem().toString();
				String branch_id = getIdBranch(branch);
                int roleId = getIdRole(role);
                
                Staff s1 = new Staff(branch_id, username, "123", Full_Name, gender, date_of_birth, registeredDate, address, phone_number, email, roleId, 1);
                boolean flag = insertAccount(s1);
                if (flag != false) {
                    JOptionPane.showMessageDialog(this, "Thêm nhân viên mới thành công!!! Password mặc định là 123", "", JOptionPane.CLOSED_OPTION);
                    getStaff();
                } else {
                    JOptionPane.showMessageDialog(this, "Thêm nhân viên mới thất bại!!!", "", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        if (mode == Mode.MODIFY) {
//			jComboBox_Branch.setEnabled(false);
//            jTextField_ID.setEnabled(false);
            String username = jTextField_ID.getText();
            String Full_Name = jTextField_Name.getText();
            String genderEndlish = getSelectedButtonText(buttonGroup1);
            String gender = "";
            if (genderEndlish.equalsIgnoreCase("Male")) {
                gender = "Nam";
            } else if (genderEndlish.equalsIgnoreCase("Female")) {
                gender = "Nữ";
            } else {
                gender = "Khác";
            }
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            String date_of_birth = sdf.format(jDateChooser_DateOfBirth.getDate());
            String address = jTextField_Address.getText();
            String email = jTextField_Email.getText();
            String phone = jTextField_PhoneNumber.getText();
            String role = jComboBox_Role.getSelectedItem().toString();
            int roleId = getIdRole(role);
			String branch = jComboBox_Branch.getSelectedItem().toString();
			String branch_id = getIdBranch(branch);

            boolean flag = updateAccount(branch_id, username, Full_Name, gender, date_of_birth, address, phone, email, roleId);
            if (flag == true) {
                JOptionPane.showMessageDialog(null, "Sửa thông tin nhân viên mới thành công!!!", "", JOptionPane.CLOSED_OPTION);
                getStaff();
            } else {
                JOptionPane.showMessageDialog(null, "Sửa thông tin nhân viên mới thất bại!!!", "", JOptionPane.ERROR_MESSAGE);
            }
        }
        UIController.showCardLayout("cardFirst", jPanel_Card);
		setEditableForAll(false);
		clearAll();
    }//GEN-LAST:event_jButton_OKActionPerformed

    private void jButton_CancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_CancelActionPerformed
        // TODO add your handling code here:
        mode = Mode.FREE;
        clearAll();
        setEditableForAll(false);
        if (jTable_Staff.getSelectedRow() != -1) {
        } else {
            jButton_Modify.setEnabled(false);
            jButton_Remove.setEnabled(false);
        }
        UIController.showCardLayout("cardFirst", jPanel_Card);
    }//GEN-LAST:event_jButton_CancelActionPerformed

    private void jButton_ClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ClearActionPerformed
        // TODO add your handling code here:
        clearAll();
    }//GEN-LAST:event_jButton_ClearActionPerformed

    // check ward_id và specific_address , nếu trùng thì không cần thêm.
    private int getAddress_idBySpecific_address(int ward_id, String specific_address) {
        int id = -1;
        Connection ketNoi = Connect.GetConnect();
        String sql = "select * from address WHERE specific_address ='" + specific_address + "' and ward_id = '" + ward_id + "'";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                id = rs.getInt("address_id");

            }
        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return id;
    }

    // nếu không trùng thì thêm specific_address
    private void insertNewAddress(int ward_id, String specific_address) {
        Connection ketNoi = Connect.GetConnect();
        String sql = "insert into address(ward_id,specific_address) values(?,?)";
        try {
            PreparedStatement ps = ketNoi.prepareStatement(sql);
            ps.setInt(1, ward_id);
            ps.setString(2, specific_address);
            ps.executeUpdate();

        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void jButton_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_AddActionPerformed
        clearAll();
        mode = Mode.ADD;
        UIController.showCardLayout("cardSecond", jPanel_Card);
        setEditableForAll(true);
        jTextField_ID.setEditable(true);
    }//GEN-LAST:event_jButton_AddActionPerformed

    private String getCurrentID(Connection connection, String branch_id) throws SQLException {
        // Truy vấn cơ sở dữ liệu để lấy mã tăng dần hiện tại
        String query = "SELECT MAX(id) AS maxID FROM account WHERE branch_id = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(query);
		preparedStatement.setString(1, branch_id);
        ResultSet resultSet = preparedStatement.executeQuery();
        
        String currentID = branch_id + "A000"; // Giá trị mặc định nếu chưa có dữ liệu trong bảng
        
        while (resultSet.next()) {
            String maxID = resultSet.getString("maxID");
            if (maxID != null) {
                currentID = maxID;
            }
        }
        
        preparedStatement.close();
        resultSet.close();
        
        return currentID;
    }

    private int getNumber(String currentID) {
        // Tách phần số từ mã hiện tại
        String numberPart = currentID.substring(currentID.length() - 3);
        return Integer.parseInt(numberPart);
    }

    private String generateNewID(int nextNumber, String branch_id) {
		nextNumber++;
        // Ghép phần số vào mã mới
		String s = branch_id + "A";
        return s + String.format("%03d", nextNumber);
    }	

    public boolean insertAccount(Staff s) {
        Connection ketNoi = Connect.GetConnect();
		String current_id = "";
		try {
			current_id = getCurrentID(ketNoi, s.getBranch_id());
		} catch (SQLException ex) {
			Logger.getLogger(StaffPanel.class.getName()).log(Level.SEVERE, null, ex);
		}
		int new_num = getNumber(current_id);
		String new_id = generateNewID(new_num, s.getBranch_id());
		System.out.println("New user id: " + new_id);
        String sql = "INSERT INTO account (id, branch_id, account_role_id, account_name, gender, date_of_birth, registered_date, email, phone, account_address, account_username, account_password, account_status) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
        PreparedStatement ps;
        try {
            ps = ketNoi.prepareStatement(sql);
			ps.setString(1, new_id);
			ps.setString(2, s.getBranch_id());
			ps.setInt(3, s.getRoleId());
			ps.setString(4, s.getFullName());
			ps.setString(5, s.getGender());
			ps.setString(6, s.getDateOfBirth());
			ps.setString(7, s.getRegisteredDate());
			ps.setString(8, s.getEmail());
			ps.setString(9, s.getPhoneNumber());
			ps.setString(10, s.getAddress());
			ps.setString(11, s.getUsername());
			ps.setString(12, s.getPassword());
			ps.setInt(13, s.getStatus());
			
            return ps.executeUpdate() > 0;

        } catch (SQLException ex) {
            Logger.getLogger(ReaderPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
		System.out.println("Insert staff failed!");
        return false;
    }

    public String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }

    private void jButton_ModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ModifyActionPerformed
        // TODO add your handling code here:
        mode = Mode.MODIFY;
        UIController.showCardLayout("cardSecond", jPanel_Card);
        setEditableForAll(true);
		jComboBox_Branch.setEnabled(false);
    }//GEN-LAST:event_jButton_ModifyActionPerformed

    public boolean updateAccount(String branch_id, String username, String Full_Name, String gender, String date_of_birth, String address, String phone_number, String email, int roleId) {
        Connection ketNoi = Connect.GetConnect();
        String sql = "update account set branch_id = ?, account_name = ?, gender = ?, date_of_birth = ?, account_address = ?, phone = ?, email = ?, account_role_id = ? where account_username = ?";
        PreparedStatement ps;
        try {
            ps = ketNoi.prepareStatement(sql);
			ps.setString(1, branch_id);
            ps.setString(2, Full_Name);
            ps.setString(3, gender);
            ps.setString(4, date_of_birth);
            ps.setString(5, address);
            ps.setString(6, phone_number);
            ps.setString(7, email);
            ps.setInt(8, roleId);
            ps.setString(9, username);
            ps.executeUpdate();
            return true;
        } catch (SQLException ex) {
            Logger.getLogger(ReaderPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    private void jButton_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_RemoveActionPerformed
        // TODO add your handling code here:
        jButton_Modify.setEnabled(false);
        jButton_Remove.setEnabled(false);
        String maNV = jTextField_ID.getText();
        if (maNV.equals("")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn nhân viên bạn muốn xóa");
        } else {
            int luaChon = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa?", "Xác nhận", 0);
            if (luaChon == JOptionPane.CANCEL_OPTION) {
                return;
            } else if (luaChon == JOptionPane.OK_OPTION) {
                xoaNhanVien(maNV);
                JOptionPane.showMessageDialog(this, "Xóa nhân viên thành công!");
                clearAll();
                getStaff();
            }
        }
    }//GEN-LAST:event_jButton_RemoveActionPerformed

    // status 0 => 1
    public void xoaNhanVien(String maNV) {
        String sql = "update account set account_status = 0 where id =  ? ";
        Connection con = Connect.GetConnect();
        try {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setString(1, maNV);
            ps.executeUpdate();
            ps.close();
            con.close();

        } catch (SQLException ex) {
            Logger.getLogger(StaffPanel.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    String getIdBranch(String name) {
        String branch_id = "";
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select id from branch where branch_name = ?");
            ps.setString(1, name);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                branch_id = rs.getString(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy branch_id");
        }
        return branch_id;
    }	
	
    String getNameBranch(String name) {
        String branch_id = "";
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select branch_name from branch where id = ?");
            ps.setString(1, name);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                branch_id = rs.getString(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy branch_name");
        }
        return branch_id;
    }	

    int getIdRole(String role) {
        int i = 0;
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select id from account_role where account_name = ?");
            ps.setString(1, role);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                i = rs.getInt(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy role_id");
        }
        return i;
    }

    String getUserName(String id) {
        String username = "";
        Connection ketNoi = Connect.GetConnect();
        try {
            PreparedStatement ps = ketNoi.prepareStatement("select account_username from account where id = ?");
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                username = rs.getString(1);
            }
            ps.close();
            rs.close();
            ketNoi.close();
        } catch (SQLException ex) {
            System.out.println("Lỗi lấy account_username!");
        }
        return username;
    }

    private void jComboBox_BranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_BranchActionPerformed

    }//GEN-LAST:event_jComboBox_BranchActionPerformed


    private void jTable_StaffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_StaffMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable_Staff.getModel();
        int selectedRow = jTable_Staff.getSelectedRow();

//        List<Integer> list = getIdDistrictAndIdProvince(model.getValueAt(selectedRow, 0).toString());
        jTextField_ID.setText(getUserName(model.getValueAt(selectedRow, 0).toString()));
        jTextField_Name.setText(model.getValueAt(selectedRow, 2).toString());
        jTextField_Email.setText(model.getValueAt(selectedRow, 8).toString());
        jTextField_PhoneNumber.setText(model.getValueAt(selectedRow, 7).toString());
        jTextField_Address.setText(model.getValueAt(selectedRow, 6).toString());
        jComboBox_Branch.setSelectedItem(getNameBranch(model.getValueAt(selectedRow, 1).toString()));
        jComboBox_Role.setSelectedItem(model.getValueAt(selectedRow, 3).toString());
        if (model.getValueAt(selectedRow, 4).toString().equalsIgnoreCase("Nam")) {
            jRadioButton_Male.setSelected(true);
        } else if (model.getValueAt(selectedRow, 4).toString().equalsIgnoreCase("Nữ")) {
            jRadioButton_Female.setSelected(true);
        } else {
            jRadioButton_Other.setSelected(true);
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        try {
            jDateChooser_DateOfBirth.setDate(sdf.parse(model.getValueAt(selectedRow, 5).toString()));
        } catch (ParseException ex) {
            System.out.println(ex.getMessage());
        }
        jButton_Modify.setEnabled(true);
        jButton_Remove.setEnabled(true);
    }//GEN-LAST:event_jTable_StaffMouseClicked

    private void jComboBox_RoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_RoleActionPerformed

    }//GEN-LAST:event_jComboBox_RoleActionPerformed

    private void jButton_ClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ClearSearchActionPerformed
        // TODO add your handling code here:
        jTextField_NameSearch.setText("");
    }//GEN-LAST:event_jButton_ClearSearchActionPerformed

    private void jTextField_NameSearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField_NameSearchCaretUpdate
        // TODO add your handling code here:
        String tuKhoa = jTextField_NameSearch.getText().toLowerCase();
        TableRowSorter<TableModel> trs = new TableRowSorter<>(jTable_Staff.getModel());
        jTable_Staff.setRowSorter(trs);
        trs.setRowFilter(RowFilter.regexFilter("(?i)" + tuKhoa, 1));
    }//GEN-LAST:event_jTextField_NameSearchCaretUpdate

    private void jButton_ExportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ExportExcelActionPerformed
        // TODO add your handling code here:
        File.xuatFileExcel("DSNhanVien", (DefaultTableModel) jTable_Staff.getModel(), "NhanVien");
        JOptionPane.showMessageDialog(this, "Xuất file excel thành công!");
    }//GEN-LAST:event_jButton_ExportExcelActionPerformed

    private void jButton_ImportExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_ImportExcelActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter excelFilter = new FileNameExtensionFilter("excel", "xls", "xlsx", "xlsm");
        fileChooser.setFileFilter(excelFilter);
        fileChooser.setMultiSelectionEnabled(false);
        int x = fileChooser.showDialog(this, "Chọn file");
        if (x == JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileChooser.getSelectedFile();
            File.nhapFileExcel(file.getAbsolutePath(), (DefaultTableModel) jTable_Staff.getModel());
        } else {
            return;
        }
    }//GEN-LAST:event_jButton_ImportExcelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton_Add;
    private javax.swing.JButton jButton_Cancel;
    private javax.swing.JButton jButton_Clear;
    private javax.swing.JButton jButton_ClearSearch;
    private javax.swing.JButton jButton_ExportExcel;
    private javax.swing.JButton jButton_ImportExcel;
    private javax.swing.JButton jButton_Modify;
    private javax.swing.JButton jButton_OK;
    private javax.swing.JButton jButton_Remove;
    private javax.swing.JComboBox<String> jComboBox_Branch;
    private javax.swing.JComboBox<String> jComboBox_Role;
    private com.toedter.calendar.JDateChooser jDateChooser_DateOfBirth;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel_Card;
    private javax.swing.JPanel jPanel_Card1;
    private javax.swing.JPanel jPanel_Card2;
    private javax.swing.JRadioButton jRadioButton_Female;
    private javax.swing.JRadioButton jRadioButton_Male;
    private javax.swing.JRadioButton jRadioButton_Other;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable_Staff;
    private javax.swing.JTextField jTextField_Address;
    private javax.swing.JTextField jTextField_Email;
    private javax.swing.JTextField jTextField_ID;
    private javax.swing.JTextField jTextField_Name;
    private javax.swing.JTextField jTextField_NameSearch;
    private javax.swing.JTextField jTextField_PhoneNumber;
    // End of variables declaration//GEN-END:variables
}
